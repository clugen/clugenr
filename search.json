[{"path":"/articles/dev.html","id":"setup-clugenr-development","dir":"Articles","previous_headings":"","what":"Setup clugenr development","title":"Development","text":"Clone package, cd package’s folder start R: Developing clugenr requires devtools, thus make sure ’s installed continuing. Open R prompt clugenr folder install clugenr’s development dependencies: package can tested follows: four levels testing, increasing thoroughness (slowness): cran, ci, normal full. first two run default CRAN CI environments, respectively. third one, normal, default mode running tests locally, may take time (10-20 minutes). last one, full thorough can take hours. ’s possible define tests thoroughness setting CLUGENR_TEST_MODE environment variable. example, simulate tests run CRAN follows: following instruction updates documentation, builds checks package locally: ’s also possible define environment run tests performing check: Create update generated documentation man/, file collation NAMESPACE: Build clugenr’s website (requires pkgdown, ggplot2, patchwork rgl): Install package locally : Check works:","code":"$ git clone https://github.com/clugen/clugenr.git $ cd clugenr devtools::install_dev_deps() devtools::test() Sys.setenv(CLUGENR_TEST_MODE = \"cran\") devtools::test() Sys.unsetenv(\"CLUGENR_TEST_MODE\") devtools::check() Sys.setenv(CLUGENR_TEST_MODE = \"ci\") devtools::check() Sys.unsetenv(\"CLUGENR_TEST_MODE\") devtools::document() pkgdown::build_site() # Can also be done with devtools::build_site() # In either case add option `preview = F` to avoid opening the browser devtools::install() library(clugenr) x <- clugen(2, 5, 800, c(-1, 1), 0.6, c(4, 6), 5, 0.4, 0.5) plot(x$points, col = x$clusters, xlab = \"x\", ylab = \"y\", asp = 1)"},{"path":"/articles/dev.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"Development","text":"contribute clugenr, follow tidyverse style guide. highlights include, limited : File encoding: UTF-8 Indentation: 2 spaces (tabs) Line size limit: 80 chars Newlines: Unix style, .e. LF \\n","code":""},{"path":[]},{"path":"/articles/examples2d.html","id":"using-the-direction-parameter","dir":"Articles","previous_headings":"Manipulating the direction of cluster-supporting lines","what":"Using the direction parameter","title":"Examples in 2D","text":"","code":"seed <- 123 e01 <- clugen(2, 4, 200, c(1, 0), 0, c(10, 10), 10, 1.5, 0.5, seed = seed) e02 <- clugen(2, 4, 200, c(1, 1), 0, c(10, 10), 10, 1.5, 0.5, seed = seed) e03 <- clugen(2, 4, 200, c(0, 1), 0, c(10, 10), 10, 1.5, 0.5, seed = seed) plot_examples_2d(list(e = e01, t = \"e01: direction = [1, 0]\"),                  list(e = e02, t = \"e02: direction = [1, 1]\"),                  list(e = e03, t = \"e03: direction = [0, 1]\"))"},{"path":"/articles/examples2d.html","id":"changing-the-angle_disp-parameter-and-using-a-custom-angle_deltas_fn-function","dir":"Articles","previous_headings":"Manipulating the direction of cluster-supporting lines","what":"Changing the angle_disp parameter and using a custom angle_deltas_fn function","title":"Examples in 2D","text":"","code":"seed <- 123 # Custom angle_deltas function: arbitrarily rotate some clusters by 90 degrees angdel_90_fn <- function(nclu, astd) sample(c(0, pi / 2), nclu, replace = TRUE) e04 <- clugen(2, 6, 500, c(1, 0), 0, c(10, 10), 10, 1.5, 0.5, seed = seed) e05 <- clugen(2, 6, 500, c(1, 0), pi / 8, c(10, 10), 10, 1.5, 0.5, seed = seed) e06 <- clugen(2, 6, 500, c(1, 0), 0, c(10, 10), 10, 1.5, 0.5, seed = seed,               angle_deltas_fn = angdel_90_fn) plot_examples_2d(list(e = e04, t = \"e04: angle_disp = 0\"),                  list(e = e05, t = \"e05: angle_disp = π/8\"),                  list(e = e06, t = \"e06: custom angle_deltas function\"))"},{"path":[]},{"path":"/articles/examples2d.html","id":"using-the-llength-parameter","dir":"Articles","previous_headings":"Manipulating the length of cluster-supporting lines","what":"Using the llength parameter","title":"Examples in 2D","text":"","code":"seed <- 321 e07 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 0, 0, 0.5, seed = seed,               point_dist_fn = \"n\") e08 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 10, 0, 0.5, seed = seed,               point_dist_fn = \"n\") e09 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 30, 0, 0.5, seed = seed,               point_dist_fn = \"n\") plot_examples_2d(list(e = e07, t = \"e07: llength = 0\"),                  list(e = e08, t = \"e08: llength = 10\"),                  list(e = e09, t = \"e09: llength = 30\"))"},{"path":"/articles/examples2d.html","id":"changing-the-llength_disp-parameter-and-using-a-custom-llengths_fn-function","dir":"Articles","previous_headings":"Manipulating the length of cluster-supporting lines","what":"Changing the llength_disp parameter and using a custom llengths_fn function","title":"Examples in 2D","text":"","code":"seed <- 765 # Custom llengths function: line lengths grow for each new cluster llen_grow_fn <- function(nclu, llen, llenstd) {   llen * 0:(nclu - 1) + rnorm(nclu, sd = llenstd) } e10 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 15,  0.0, 0.5,               seed = seed, point_dist_fn = \"n\") e11 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 15, 10.0, 0.5,               seed = seed, point_dist_fn = \"n\") e12 <- clugen(2, 5, 800, c(1, 0), pi / 10, c(10, 10), 10,  0.1, 0.5,               seed = seed, llengths_fn = llen_grow_fn, point_dist_fn = \"n\") plot_examples_2d(list(e = e10, t = \"e10: llength_disp = 0.0\"),                  list(e = e11, t = \"e11: llength_disp = 5.0\"),                  list(e = e12, t = \"e12: custom llengths function\"))"},{"path":[]},{"path":"/articles/examples2d.html","id":"using-the-cluster_sep-parameter","dir":"Articles","previous_headings":"Manipulating relative cluster positions","what":"Using the cluster_sep parameter","title":"Examples in 2D","text":"","code":"seed <- 222 e13 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(10, 10), 15, 2, 4, seed = seed) e14 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(30, 10), 15, 2, 4, seed = seed) e15 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(10, 30), 15, 2, 4, seed = seed) plot_examples_2d(list(e = e13, t = \"e13: cluster_sep = [10, 10]\"),                  list(e = e14, t = \"e14: cluster_sep = [30, 10]\"),                  list(e = e15, t = \"e15: cluster_sep = [10, 30]\"))"},{"path":"/articles/examples2d.html","id":"changing-the-cluster_offset-parameter-and-using-a-custom-clucenters_fn-function","dir":"Articles","previous_headings":"Manipulating relative cluster positions","what":"Changing the cluster_offset parameter and using a custom clucenters_fn function","title":"Examples in 2D","text":"","code":"seed <- 222 # Custom clucenters function: places clusters in a diagonal centers_diag <- function(nclu, csep, coff) {   matrix(1, nrow = nclu, ncol = length(csep)) * (1:nclu * max(csep)) +     rep(coff, each = nclu) } e16 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(10, 10), 10, 2, 2.5, seed = seed) e17 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(10, 10), 10, 2, 2.5, seed = seed,               cluster_offset = c(20, -20)) e18 <- clugen(2, 8, 1000, c(1, 1), pi / 4, c(10, 10), 10, 2, 2.5, seed = seed,               cluster_offset = c(-50, -50), clucenters_fn = centers_diag) plot_examples_2d(list(e = e16, t = \"e16: default\"),                  list(e = e17, t = \"e17: cluster_offset = [20, -20]\"),                  list(e = e18, t = \"e18: custom clucenters function\"))"},{"path":"/articles/examples2d.html","id":"lateral-dispersion-and-placement-of-point-projections-on-the-line","dir":"Articles","previous_headings":"","what":"Lateral dispersion and placement of point projections on the line","title":"Examples in 2D","text":"","code":"seed <- 234"},{"path":"/articles/examples2d.html","id":"normal-projection-placement-default-proj_dist_fn-norm","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Normal projection placement (default): proj_dist_fn = \"norm\"","title":"Examples in 2D","text":"","code":"e19 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 0.0, seed = seed) e20 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 1.0, seed = seed) e21 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 3.0, seed = seed) plot_examples_2d(list(e = e19, t = \"e19: lateral_disp = 0\"),                  list(e = e20, t = \"e20: lateral_disp = 1\"),                  list(e = e21, t = \"e21: lateral_disp = 3\"))"},{"path":"/articles/examples2d.html","id":"uniform-projection-placement-proj_dist_fn-unif","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Uniform projection placement: proj_dist_fn = \"unif\"","title":"Examples in 2D","text":"","code":"e22 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 0.0, seed = seed,               proj_dist_fn = \"unif\") e23 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 1.0, seed = seed,               proj_dist_fn = \"unif\") e24 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 3.0, seed = seed,               proj_dist_fn = \"unif\") plot_examples_2d(list(e = e22, t = \"e22: lateral_disp = 0\"),                  list(e = e23, t = \"e23: lateral_disp = 1\"),                  list(e = e24, t = \"e24: lateral_disp = 3\"))"},{"path":"/articles/examples2d.html","id":"custom-projection-placement-using-the-beta-distribution","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Custom projection placement using the Beta distribution","title":"Examples in 2D","text":"","code":"# Custom proj_dist_fn: point projections placed using the Beta distribution proj_beta <- function(len, n) len * rbeta(n, 0.1, 0.1) - len / 2 e25 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 0.0, seed = seed,               proj_dist_fn = proj_beta) e26 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 1.0, seed = seed,               proj_dist_fn = proj_beta) e27 <- clugen(2, 4, 1000, c(1, 0), pi / 2, c(20, 20), 13, 2, 3.0, seed = seed,               proj_dist_fn = proj_beta) plot_examples_2d(list(e = e25, t = \"e25: lateral_disp = 0\"),                  list(e = e26, t = \"e26: lateral_disp = 1\"),                  list(e = e27, t = \"e27: lateral_disp = 3\"))"},{"path":"/articles/examples2d.html","id":"controlling-final-point-positions-from-their-projections-on-the-cluster-supporting-line","dir":"Articles","previous_headings":"","what":"Controlling final point positions from their projections on the cluster-supporting line","title":"Examples in 2D","text":"","code":"seed <- 12321 # Custom proj_dist_fn: point projections placed using the Beta distribution proj_beta <- function(len, n) len * rbeta(n, 0.1, 0.1) - len / 2"},{"path":"/articles/examples2d.html","id":"points-on-hyperplane-orthogonal-to-cluster-supporting-line-default-point_dist_fn-n-1","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Points on hyperplane orthogonal to cluster-supporting line (default): point_dist_fn = \"n-1\"","title":"Examples in 2D","text":"","code":"e28 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed) e29 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               proj_dist_fn = \"unif\") e30 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               proj_dist_fn = proj_beta) plot_examples_2d(list(e = e28, t = \"e28: proj_dist_fn = 'norm' (default)\"),                  list(e = e29, t = \"e29: proj_dist_fn = 'unif'\"),                  list(e = e30, t = \"e30: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples2d.html","id":"points-around-projection-on-cluster-supporting-line-point_dist_fn-n","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Points around projection on cluster-supporting line: point_dist_fn = \"n\"","title":"Examples in 2D","text":"","code":"e31 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = \"n\") e32 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = \"n\", proj_dist_fn = \"unif\") e33 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = \"n\", proj_dist_fn = proj_beta) plot_examples_2d(list(e = e31, t = \"e31: proj_dist_fn = 'norm' (default)\"),               list(e = e32, t = \"e32: proj_dist_fn = 'unif'\"),               list(e = e33, t = \"e33: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples2d.html","id":"custom-point-placement-using-the-exponential-distribution","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Custom point placement using the exponential distribution","title":"Examples in 2D","text":"","code":"# Custom point_dist_fn: final points placed using the Exponential distribution clupoints_n_1_exp <- function(projs, lat_std, len, clu_dir, clu_ctr) {     dist_exp <- function(npts, lstd) lstd * rexp(npts, rate = 2 / lstd)     clupoints_n_1_template(projs, lat_std, clu_dir, dist_exp) } e34 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = clupoints_n_1_exp) e35 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = clupoints_n_1_exp, proj_dist_fn = \"unif\") e36 <- clugen(2, 5, 1500, c(1, 0), pi / 4, c(20, 20), 14, 2, 2.0, seed = seed,               point_dist_fn = clupoints_n_1_exp, proj_dist_fn = proj_beta) plot_examples_2d(list(e = e34, t = \"e34: proj_dist_fn = 'norm' (default)\"),                  list(e = e35, t = \"e35: proj_dist_fn = 'unif'\"),                  list(e = e36, t = \"e36: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples2d.html","id":"manipulating-cluster-sizes","dir":"Articles","previous_headings":"","what":"Manipulating cluster sizes","title":"Examples in 2D","text":"","code":"seed <- 87 # Custom clucenters_fn (all): yields fixed positions for the clusters centers_fixed <- function(nclu, csep, coff) {   matrix(c(-csep[1], -csep[2], csep[1], -csep[2], -csep[1], csep[2], csep[1], csep[2]),          nrow = nclu, byrow = TRUE) }  # Custom clusizes_fn (e38): cluster sizes determined via the uniform distribution, # no correction for total points clusizes_unif <- function(nclu, npts, ae) sample(2 * npts / nclu, nclu, replace = TRUE)  # Custom clusizes_fn (e39): clusters all have the same size, no correction for # total points clusizes_equal <- function(nclu, npts, ae) npts %/% nclu * rep.int(1, nclu) e37 <- clugen(2, 4, 1500, c(1, 1), pi, c(20, 20), 0, 0, 5, seed = seed,               clucenters_fn = centers_fixed, point_dist_fn = \"n\") e38 <- clugen(2, 4, 1500, c(1, 1), pi, c(20, 20), 0, 0, 5, seed = seed,               clucenters_fn = centers_fixed, clusizes_fn = clusizes_unif,               point_dist_fn = \"n\") e39 <- clugen(2, 4, 1500, c(1, 1), pi, c(20, 20), 0, 0, 5, seed = seed,               clucenters_fn = centers_fixed, clusizes_fn = clusizes_equal,               point_dist_fn = \"n\") plot_examples_2d(list(e = e37, t = \"e37: normal dist. (default)\"),                  list(e = e38, t = \"e38: unif. dist. (custom)\"),                  list(e = e39, t = \"e39: equal size (custom)\"))"},{"path":[]},{"path":"/articles/examples3d.html","id":"using-the-direction-parameter","dir":"Articles","previous_headings":"Manipulating the direction of cluster-supporting lines","what":"Using the direction parameter","title":"Examples in 3D","text":"","code":"seed <- 123 e40 <- clugen(3, 4, 500, c(1, 0, 0), 0, c(10, 10, 10), 15, 1.5, 0.5, seed = seed) e41 <- clugen(3, 4, 500, c(1, 1, 1), 0, c(10, 10, 10), 15, 1.5, 0.5, seed = seed) e42 <- clugen(3, 4, 500, c(0, 0, 1), 0, c(10, 10, 10), 15, 1.5, 0.5, seed = seed) plot_examples_3d(list(e = e40, t = \"e40: direction = [1, 0, 0]\"),                  list(e = e41, t = \"e41: direction = [1, 1, 1]\"),                  list(e = e42, t = \"e42: direction = [0, 0, 1]\"))"},{"path":"/articles/examples3d.html","id":"changing-the-angle_disp-parameter-and-using-a-custom-angle_deltas_fn-function","dir":"Articles","previous_headings":"Manipulating the direction of cluster-supporting lines","what":"Changing the angle_disp parameter and using a custom angle_deltas_fn function","title":"Examples in 3D","text":"","code":"seed <- 123 # Custom angle_deltas function: arbitrarily rotate some clusters by 90 degrees angdel_90 <- function(nclu, astd) sample(c(0, pi / 2), nclu, replace = TRUE) e43 <- clugen(3, 6, 1000, c(1, 0, 0), 0, c(10, 10, 10), 15, 1.5, 0.5, seed = seed) e44 <- clugen(3, 6, 1000, c(1, 0, 0), pi / 8, c(10, 10, 10), 15, 1.5, 0.5, seed = seed) e45 <- clugen(3, 6, 1000, c(1, 0, 0), 0, c(10, 10, 10), 15, 1.5, 0.5, seed = seed,               angle_deltas_fn = angdel_90) plot_examples_3d(list(e = e43, t = \"e43: angle_disp = 0\"),                  list(e = e44, t = \"e44: angle_disp = π / 8\"),                  list(e = e45, t = \"e45: custom angle_deltas function\"))"},{"path":"/articles/examples3d.html","id":"manipulating-the-length-of-cluster-supporting-lines","dir":"Articles","previous_headings":"","what":"Manipulating the length of cluster-supporting lines","title":"Examples in 3D","text":"","code":"seed <- 123"},{"path":"/articles/examples3d.html","id":"using-the-llength-parameter","dir":"Articles","previous_headings":"Manipulating the length of cluster-supporting lines","what":"Using the llength parameter","title":"Examples in 3D","text":"","code":"e46 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 0, 0, 0.5,               seed = seed, point_dist_fn = \"n\") e47 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 10, 0, 0.5,               seed = seed, point_dist_fn = \"n\") e48 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 30, 0, 0.5,               seed = seed, point_dist_fn = \"n\") plot_examples_3d(list(e = e46, t = \"e46: llength = 0\"),                  list(e = e47, t = \"e47: llength = 10\"),                  list(e = e48, t = \"e48: llength = 30\"))"},{"path":"/articles/examples3d.html","id":"changing-the-llength_disp-parameter-and-using-a-custom-llengths_fn-function","dir":"Articles","previous_headings":"Manipulating the length of cluster-supporting lines","what":"Changing the llength_disp parameter and using a custom llengths_fn function","title":"Examples in 3D","text":"","code":"# Custom llengths function: line lengths tend to grow for each new cluster llen_grow <- function(nclu, llen, llenstd) {   llen * (0:(nclu - 1) + rnorm(nclu, sd = llenstd)) } e49 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 15,  0.0, 0.5,               seed = seed, point_dist_fn = \"n\") e50 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 15, 10.0, 0.5,               seed = seed, point_dist_fn = \"n\") e51 <- clugen(3, 5, 800, c(1, 0, 0), pi / 10, c(10, 10, 10), 10,  0.1, 0.5,               seed = seed, point_dist_fn = \"n\", llengths_fn = llen_grow) plot_examples_3d(list(e = e49, t = \"e49: llength_disp = 0.0\"),                  list(e = e50, t = \"e50: llength_disp = 10.0\"),                  list(e = e51, t = \"e51: custom llengths function\"))"},{"path":[]},{"path":"/articles/examples3d.html","id":"using-the-cluster_sep-parameter","dir":"Articles","previous_headings":"Manipulating relative cluster positions","what":"Using the cluster_sep parameter","title":"Examples in 3D","text":"","code":"seed <- 321 e52 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(30, 10, 10), 25, 4, 3, seed = seed) e53 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(10, 30, 10), 25, 4, 3, seed = seed) e54 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(10, 10, 30), 25, 4, 3, seed = seed) plot_examples_3d(list(e = e52, t = \"e52: cluster_sep = [30, 10, 10]\"),                  list(e = e53, t = \"e53: cluster_sep = [10, 30, 10]\"),                  list(e = e54, t = \"e54: cluster_sep = [10, 10, 30]\"))"},{"path":"/articles/examples3d.html","id":"changing-the-cluster_offset-parameter-and-using-a-custom-clucenters_fn-function","dir":"Articles","previous_headings":"Manipulating relative cluster positions","what":"Changing the cluster_offset parameter and using a custom clucenters_fn function","title":"Examples in 3D","text":"","code":"seed <- 321 # Custom clucenters function: places clusters in a diagonal centers_diag <- function(nclu, csep, coff) {   matrix(1, nrow = nclu, ncol = length(csep)) * (1:nclu * max(csep)) +     rep(coff, each = nclu) } e55 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(10, 10, 10), 12, 3, 2.5, seed = seed) e56 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(10, 10, 10), 12, 3, 2.5, seed = seed,               cluster_offset = c(20, -20, 20)) e57 <- clugen(3, 8, 1000, c(1, 1, 1), pi / 4, c(10, 10, 10), 12, 3, 2.5, seed = seed,               cluster_offset = c(-50, -50, -50), clucenters_fn = centers_diag) plot_examples_3d(list(e = e55, t = \"e55: default\"),                  list(e = e56, t = \"e56: cluster_offset = [20, -20, 20]\"),                  list(e = e57, t = \"e57: custom clucenters function\"))"},{"path":"/articles/examples3d.html","id":"lateral-dispersion-and-placement-of-point-projections-on-the-line","dir":"Articles","previous_headings":"","what":"Lateral dispersion and placement of point projections on the line","title":"Examples in 3D","text":"","code":"seed <- 456"},{"path":"/articles/examples3d.html","id":"normal-projection-placement-default-proj_dist_fn-norm","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Normal projection placement (default): proj_dist_fn = \"norm\"","title":"Examples in 3D","text":"","code":"e58 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 0.0, seed = seed) e59 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 1.0, seed = seed) e60 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 3.0, seed = seed) plot_examples_3d(list(e = e58, t = \"e58: lateral_disp = 0\"),                  list(e = e59, t = \"e59: lateral_disp = 1\"),                  list(e = e60, t = \"e60: lateral_disp = 3\"))"},{"path":"/articles/examples3d.html","id":"uniform-projection-placement-proj_dist_fn-unif","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Uniform projection placement: proj_dist_fn = \"unif\"","title":"Examples in 3D","text":"","code":"e61 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 0.0, seed = seed,               proj_dist_fn = \"unif\") e62 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 1.0, seed = seed,               proj_dist_fn = \"unif\") e63 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 3.0, seed = seed,               proj_dist_fn = \"unif\") plot_examples_3d(list(e = e61, t = \"e61: lateral_disp = 0\"),                  list(e = e62, t = \"e62: lateral_disp = 1\"),                  list(e = e63, t = \"e63: lateral_disp = 3\"))"},{"path":"/articles/examples3d.html","id":"custom-projection-placement-using-the-beta-distribution","dir":"Articles","previous_headings":"Lateral dispersion and placement of point projections on the line","what":"Custom projection placement using the Beta distribution","title":"Examples in 3D","text":"","code":"# Custom proj_dist_fn: point projections placed using the Beta distribution proj_beta <- function(len, n) len * rbeta(n, 0.1, 0.1) - len / 2 e64 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 0.0, seed = seed,               proj_dist_fn = proj_beta) e65 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 1.0, seed = seed,               proj_dist_fn = proj_beta) e66 <- clugen(3, 4, 1000, c(1, 0, 0), pi / 2, c(20, 20, 20), 13, 2, 3.0, seed = seed,               proj_dist_fn = proj_beta) plot_examples_3d(list(e = e64, t = \"e64: lateral_disp = 0\"),                  list(e = e65, t = \"e65: lateral_disp = 1\"),                  list(e = e66, t = \"e66: lateral_disp = 3\"))"},{"path":"/articles/examples3d.html","id":"controlling-final-point-positions-from-their-projections-on-the-cluster-supporting-line","dir":"Articles","previous_headings":"","what":"Controlling final point positions from their projections on the cluster-supporting line","title":"Examples in 3D","text":"","code":"seed <- 12321 # Custom proj_dist_fn: point projections placed using the Beta distribution proj_beta <- function(len, n) len * rbeta(n, 0.1, 0.1) - len / 2"},{"path":"/articles/examples3d.html","id":"points-on-hyperplane-orthogonal-to-cluster-supporting-line-default-point_dist_fn-n-1","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Points on hyperplane orthogonal to cluster-supporting line (default): point_dist_fn = \"n-1\"","title":"Examples in 3D","text":"","code":"e67 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed) e68 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,              proj_dist_fn = \"unif\") e69 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,              proj_dist_fn = proj_beta) plot_examples_3d(list(e = e67, t = \"e67: proj_dist_fn = 'norm' (default)\"),                  list(e = e68, t = \"e68: proj_dist_fn = 'unif'\"),                  list(e = e69, t = \"e69: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples3d.html","id":"points-around-projection-on-cluster-supporting-line-point_dist_fn-n","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Points around projection on cluster-supporting line: point_dist_fn = \"n\"","title":"Examples in 3D","text":"","code":"e70 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = \"n\") e71 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = \"n\", proj_dist_fn = \"unif\") e72 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = \"n\", proj_dist_fn = proj_beta) plot_examples_3d(list(e = e70, t = \"e70: proj_dist_fn = 'norm' (default)\"),                  list(e = e71, t = \"e71: proj_dist_fn = 'unif'\"),                  list(e = e72, t = \"e72: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples3d.html","id":"custom-point-placement-using-the-exponential-distribution","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Custom point placement using the exponential distribution","title":"Examples in 3D","text":"","code":"# Custom point_dist_fn: final points placed using the Exponential distribution clupoints_n_1_exp <- function(projs, lat_std, len, clu_dir, clu_ctr) {     dist_exp <- function(npts, lstd) lstd * rexp(npts, rate = 2 / lstd)     clupoints_n_1_template(projs, lat_std, clu_dir, dist_exp) } e73 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = clupoints_n_1_exp) e74 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = clupoints_n_1_exp, proj_dist_fn = \"unif\") e75 <- clugen(3, 5, 1500, c(1, 0, 0), pi / 3, c(20, 20, 20), 22, 3, 2, seed = seed,               point_dist_fn = clupoints_n_1_exp, proj_dist_fn = proj_beta) plot_examples_3d(list(e = e73, t = \"e73: proj_dist_fn = 'norm' (default)\"),                  list(e = e74, t = \"e74: proj_dist_fn = 'unif'\"),                  list(e = e75, t = \"e75: custom proj_dist_fn (Beta dist.)\"))"},{"path":"/articles/examples3d.html","id":"manipulating-cluster-sizes","dir":"Articles","previous_headings":"Controlling final point positions from their projections on the cluster-supporting line","what":"Manipulating cluster sizes","title":"Examples in 3D","text":"","code":"seed <- 87 # Custom clucenters_fn (all): yields fixed positions for the clusters centers_fixed <- function(nclu, csep, coff) {   matrix(c(-csep[1], -csep[2], -csep[3], csep[1], -csep[2], -csep[3],            -csep[1], csep[2], csep[3], csep[1], csep[2], csep[3]),          nrow = nclu, byrow = TRUE) }  # Custom clusizes_fn (e77): cluster sizes determined via the uniform distribution, # no correction for total points clusizes_unif <- function(nclu, npts, ae) sample(2 * npts / nclu, nclu, replace = TRUE)  # Custom clusizes_fn (e78): clusters all have the same size, no correction for # total points clusizes_equal <- function(nclu, npts, ae) npts %/% nclu * rep.int(1, nclu) e76 <- clugen(3, 4, 1500, c(1, 1, 1), pi, c(20, 20, 20), 0, 0, 5, seed = seed,               point_dist_fn = \"n\",               clucenters_fn = centers_fixed) e77 <- clugen(3, 4, 1500, c(1, 1, 1), pi, c(20, 20, 20), 0, 0, 5, seed = seed,               clusizes_fn = clusizes_unif, point_dist_fn = \"n\",               clucenters_fn = centers_fixed) e78 <- clugen(3, 4, 1500, c(1, 1, 1), pi, c(20, 20, 20), 0, 0, 5, seed = seed,               clusizes_fn = clusizes_equal, point_dist_fn = \"n\",               clucenters_fn = centers_fixed) plot_examples_3d(list(e = e76, t = \"e76: normal dist. (default)\"),                  list(e = e77, t = \"e77: unif. dist. (custom)\"),                  list(e = e78, t = \"e78: equal size (custom)\"))"},{"path":"/articles/examplesnd.html","id":"basic-1d-example-with-density-plot","dir":"Articles","previous_headings":"","what":"Basic 1D example with density plot","title":"Examples in other dimensions","text":"1D examples plotted plot_examples_1d() function available .","code":"seed <- 222 # Custom proj_dist_fn: point projections placed using the Weibull distribution proj_wbull <- function(len, n) rweibull(n, shape = 1.5, scale = len / 2) - len / 2 e79 <- clugen(1, 3, 2000, 1, 0, 10, 6, 1.5, 0, seed = seed) e80 <- clugen(1, 3, 2000, 1, 0, 10, 6, 1.5, 0, seed = seed, proj_dist_fn = \"unif\") e81 <- clugen(1, 3, 2000, 1, 0, 10, 6, 1.5, 0, seed = seed, proj_dist_fn = proj_wbull) plot_examples_1d(list(e = e79, t = \"e79: proj_dist_fn='norm'\"),                  list(e = e80, t = \"e80: proj_dist_fn='unif'\"),                  list(e = e81, t = \"e81: custom proj_dist_fn (Weibull)\"),                  pmargin = 0.07,                  ymax = 0.575)"},{"path":"/articles/examplesnd.html","id":"d-example-with-default-optional-arguments","dir":"Articles","previous_headings":"","what":"5D example with default optional arguments","title":"Examples in other dimensions","text":"5D examples plotted plot_examples_nd() function available .","code":"nd <- 5 seed <- 321 e82 <- clugen(nd, 6, 1500, c(1, 1, 0.5, 0, 0), pi / 16, rep.int(30, nd), 30, 4, 3,               seed = seed) plot_examples_nd(e82, \"e82: 5D with optional parameters set to defaults\")"},{"path":"/articles/examplesnd.html","id":"d-example-with-proj_dist_fn-unif-and-point_dist_fn-n","dir":"Articles","previous_headings":"","what":"5D example with proj_dist_fn = \"unif\" and point_dist_fn = \"n\"","title":"Examples in other dimensions","text":"","code":"nd <- 5 seed <- 123 e83 <- clugen(nd, 6, 1500, c(0.1, 0.3, 0.5, 0.3, 0.1), pi / 12, rep.int(30, nd),               35, 5, 3.5, seed = seed,               proj_dist_fn = \"unif\", point_dist_fn = \"n\") plot_examples_nd(e83, \"e83: 5D with proj_dist_fn='unif' and point_dist_fn='n'\")"},{"path":"/articles/theory.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Theory","text":"Clugen algorithm generating multidimensional clusters. cluster supported line segment, position, orientation length guide respective points placed. brevity, line segments referred lines. Given \\(n\\)-dimensional direction vector \\(\\mathbf{d}\\) (number additional parameters, discussed shortly), clugen algorithm works follows (\\(^*\\) means algorithm step stochastic): Normalize \\(\\mathbf{d}\\). \\(^*\\)Determine cluster sizes. \\(^*\\)Determine cluster centers. \\(^*\\)Determine lengths cluster-supporting lines. \\(^*\\)Determine angles \\(\\mathbf{d}\\) cluster-supporting lines. \\(^*\\)Determine direction cluster-supporting line. \\(^*\\)Determine distance point projections center cluster-supporting line. Determine coordinates point projections cluster-supporting line. \\(^*\\)Determine points projections cluster-supporting line. Figure 1 provides stylized overview algorithm’s steps. Figure 1 - Stylized overview clugen algorithm. Background tiles 10 units wide tall, applicable. example Figure 1 generated following parameters, exact meaning discussed shortly: Additionally, optional parameters (listed ) left default values. also discussed next.","code":""},{"path":"/articles/theory.html","id":"detailed-description","dir":"Articles","previous_headings":"","what":"Detailed description","title":"Theory","text":"section provide detailed description algorithm parameters. start listing describing parameters (mandatory optional), analyze algorithm detail, highlighting parameter influences end result.","code":""},{"path":"/articles/theory.html","id":"algorithm-parameters","dir":"Articles","previous_headings":"Detailed description","what":"Algorithm parameters","title":"Theory","text":"clugen algorithm (consequently, clugen() function) mandatory optional parameters, listed described tables . optional parameters set sensible defaults, many situations may left unchanged. Nonetheless, allow algorithm’s steps fully customized user.","code":""},{"path":[]},{"path":[]},{"path":"/articles/theory.html","id":"the-algorithm-in-detail","dir":"Articles","previous_headings":"Detailed description","what":"The algorithm in detail","title":"Theory","text":"clugen algorithm presented Overview. section analyze algorithms steps detail.","code":""},{"path":"/articles/theory.html","id":"normalize-mathbfd","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail","what":"1. Normalize \\(\\mathbf{d}\\)","title":"Theory","text":"basic step, consists converting \\(\\mathbf{d}\\) unit vector: \\[ \\hat{\\mathbf{d}} = \\cfrac{\\mathbf{d}}{\\left\\lVert\\mathbf{d}\\right\\rVert} \\]","code":""},{"path":"/articles/theory.html","id":"determine-cluster-sizes","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail","what":"2. Determine cluster sizes","title":"Theory","text":"Cluster sizes given \\(c_s()\\) function according : \\[ \\mathbf{c_s} = c_s(c, p, \\phi) \\] \\(\\mathbf{c_s}\\) \\(c \\times 1\\) integer vector containing final cluster sizes, \\(c\\) number clusters, \\(p\\) total number points, \\(\\phi\\) boolean determines whether empty clusters acceptable. \\(c_s()\\) function optional parameter, allowing users customize behavior. default, \\(c_s()\\) implemented clusizes() function, behaves according following algorithm: Determine size \\(p_i\\) cluster \\(\\) according \\(p_i\\sim\\left\\lfloor\\max\\left(\\mathcal{N}(\\frac{p}{c}, (\\frac{p}{3c})^2),0\\right)\\right\\rceil\\), \\(\\lfloor\\rceil\\) denotes round nearest integer function, \\(\\mathcal{N}(\\mu,\\sigma^2)\\) represents normal distribution mean \\(\\mu\\) variance \\(\\sigma^2\\). Assure final cluster sizes add \\(p\\) incrementing smallest cluster size \\(\\sum_{=1}^c p_i<p\\) decrementing largest cluster size \\(\\sum_{=1}^c p_i>p\\). step delegated fix_num_points() helper function. \\(\\neg\\phi\\wedge p\\ge c\\) , empty cluster \\(\\) (.e., \\(p_i=0\\)), increment \\(p_i\\) decrement \\(p_j\\), \\(j\\) denotes largest cluster. step delegated fix_empty() helper function. Figure 2 demonstrates possible cluster sizes various definitions \\(c_s()\\) \\(c=4\\) \\(p=5000\\). default behavior, implemented clusizes() function, shown Figure 2a, Figures 2b-d present results obtained custom user functions. Figure 2b displays cluster sizes obtained discrete uniform distribution \\(\\left\\{1, 2, \\ldots, \\frac{2p}{c}\\right\\}\\), corrected fix_num_points(). turn, Figure 2c highlights cluster sizes obtained Poisson distribution \\(\\lambda=\\frac{p}{c}\\), also corrected fix_num_points(). cluster sizes shown Figure 2d determined distribution (Poisson, \\(\\lambda=\\frac{p}{c}\\)), corrected. Thus, cluster sizes add \\(p\\), highlighting fact requirement clugen algorithm, .e., user-defined \\(c_s()\\) implementations can consider \\(p\\) hint rather obligation. Figure 2 - Possible cluster sizes various definitions \\(c_s()\\) \\(c=4\\) \\(p=5000\\).","code":""},{"path":"/articles/theory.html","id":"determine-cluster-centers","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail","what":"3. Determine cluster centers","title":"Theory","text":"Cluster sizes given \\(c_c()\\) function according : \\[ \\mathbf{C} = c_c(c, \\mathbf{s}, \\mathbf{o}) \\] \\(\\mathbf{C}\\) \\(c \\times n\\) matrix containing final cluster centers, \\(c\\) number clusters, \\(\\mathbf{s}\\) average cluster separation (\\(n \\times 1\\) vector), \\(\\mathbf{o}\\) \\(n \\times 1\\) vector cluster offsets. \\(c_c()\\) function optional parameter, allowing users customize behavior. default, \\(c_c()\\) implemented clucenters() function, determines cluster centers according : \\[ \\mathbf{C}=c\\mathbf{U} \\cdot \\operatorname{diag}(\\mathbf{s}) + \\mathbf{1}\\,\\mathbf{o}^T \\] \\(\\mathbf{U}\\) \\(c \\times n\\) matrix random values drawn uniform distribution -0.5 0.5, \\(\\mathbf{1}\\) \\(c \\times 1\\) vector entries equal 1. Figure 3 shows scatters plots results generated clugen two different implementations \\(c_c()\\) function, namely using uniform distribution (default, implemented clucenters() function, Figure 3a), direct specification cluster centers (Figure 3b). Figure 3 - output clugen two different implementations \\(c_c()\\) function finding cluster centers: ) default, using uniform distribution; b) hand-picked centers. parameters Figure 1, except \\(p\\), set 5000.","code":""},{"path":"/articles/theory.html","id":"determine-lengths-of-cluster-supporting-lines","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail","what":"4. Determine lengths of cluster-supporting lines","title":"Theory","text":"lengths cluster-supporting lines given \\(l()\\) function according : \\[ \\pmb{\\ell} = l(c, l, l_\\sigma) \\] \\(\\pmb{\\ell}\\) \\(c \\times 1\\) vector containing final lengths cluster-supporting lines, \\(c\\) number clusters, \\(l\\) average length, \\(l_\\sigma\\) length dispersion. \\(l()\\) function optional parameter, allowing users customize behavior. default, \\(l()\\) implemented llengths() function, determines \\(\\ell_i\\) length cluster-supporting line \\(\\) according : \\[ \\ell_i\\sim\\left|\\mathcal{N}(l,l_\\sigma^2)\\right| \\] \\(\\left|\\mathcal{N}(\\mu,\\sigma^2)\\right|\\) represents folded normal distribution mean \\(\\mu\\) variance \\(\\sigma^2\\). Figure 4 shows cluster-supporting line lengths obtained different implementations \\(l()\\). Figure 4 - Line lengths different implementations \\(l()\\): ) default, using folded normal distribution; b) using Poisson distribution, \\(\\lambda=l\\); c) using uniform distribution interval \\(\\left\\lbrack 0, 2l\\right\\rbrack\\); , d) hand-picked lengths, specifically \\(\\pmb{\\ell}=\\begin{bmatrix}2 & 8 & 16 & 32\\end{bmatrix}^T\\). Cluster centers, well parameters \\(l\\) \\(l_\\sigma\\), example shown Figure 1.","code":""},{"path":"/articles/theory.html","id":"determine-angles-between-mathbfd-and-cluster-supporting-lines","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail","what":"5. Determine angles between \\(\\mathbf{d}\\) and cluster-supporting lines","title":"Theory","text":"angles \\(\\mathbf{d}\\) cluster-supporting lines given \\(\\theta_\\Delta()\\) function according : \\[ \\mathbf{\\Theta_\\Delta} = \\theta_\\Delta(c, \\theta_\\sigma) \\] \\(\\mathbf{\\Theta_\\Delta}\\) \\(c \\times 1\\) vector containing final angle differences \\(\\mathbf{d}\\) cluster-supporting lines, \\(c\\) number clusters, \\(\\theta_\\sigma\\) angle dispersion. \\(\\theta_\\Delta()\\) function optional parameter, allowing users customize behavior. default, \\(\\theta_\\Delta()\\) implemented angle_deltas() function, determines \\(\\theta_{\\Delta }\\) angle difference \\(\\mathbf{d}\\) \\(\\)-th cluster-supporting line according : \\[ \\theta_{\\Delta }\\sim\\mathcal{WN}_{-\\pi/2}^{\\pi/2}(0,\\theta_\\sigma^2) \\] \\(\\mathcal{WN}_{-\\pi/2}^{\\pi/2}(\\mu,\\sigma^2)\\) represents wrapped normal distribution mean \\(\\mu\\), variance \\(\\sigma^2\\), support \\(\\left[-\\pi/2,\\pi/2\\right]\\) interval, \\(\\theta_\\sigma\\) angle dispersion cluster-supporting lines. Figure 5 shows final direction cluster-supporting lines two different implementations \\(\\theta_\\Delta()\\). Figure 5 - Final directions cluster supporting-lines different implementations \\(\\theta_\\Delta()\\): ) default, angle differences obtained using wrapped normal distribution; , d) hand-picked angle differences, specifically \\(\\mathbf{\\Theta_\\Delta}=\\begin{bmatrix}0 & \\frac{\\pi}{2} & 0 & \\frac{\\pi}{2}\\end{bmatrix}^T\\). Cluster centers, well angle dispersion \\(\\theta_\\sigma\\), example shown Figure 1.","code":""},{"path":[]},{"path":"/articles/theory.html","id":"determine-direction-of-the-cluster-supporting-line","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail > 6. For each cluster \\(i\\):","what":"6.1. Determine direction of the cluster-supporting line","title":"Theory","text":"order obtain \\(\\hat{\\mathbf{d}}_i\\) final direction cluster \\(\\) supporting line, following algorithm used: 1. Find random vector \\(\\mathbf{r}\\) component taken uniform distribution -0.5 0.5. 2. Normalize \\(\\mathbf{r}\\): \\[ \\hat{\\mathbf{r}}=\\cfrac{\\mathbf{r}}{\\left\\lVert\\mathbf{r}\\right\\rVert} \\] 3. \\(|\\theta_{\\Delta }| > \\pi/2\\) \\(n=1\\), set \\(\\hat{\\mathbf{d}}_i=\\hat{\\mathbf{r}}\\) terminate algorithm. 4. \\(\\hat{\\mathbf{r}}\\) parallel \\(\\hat{\\mathbf{d}}\\) go 1. 5. Determine vector \\(\\mathbf{d}_\\perp\\) orthogonal \\(\\hat{\\mathbf{d}}\\) using first iteration Gram-Schmidt process: \\[ \\mathbf{d}_\\perp=\\hat{\\mathbf{r}}-\\cfrac{\\hat{\\mathbf{d}}\\cdot\\hat{\\mathbf{r}}}{\\hat{\\mathbf{d}}\\cdot\\hat{\\mathbf{d}}}\\:\\hat{\\mathbf{d}} \\] 6. Normalize \\(\\mathbf{d}_\\perp\\): \\[ \\hat{\\mathbf{d}}_\\perp=\\cfrac{\\mathbf{d}_\\perp}{\\left\\lVert\\mathbf{d}_\\perp\\right\\rVert} \\] 7. Determine vector \\(\\mathbf{d}_i\\) angle \\(\\theta_{\\Delta }\\) \\(\\hat{\\mathbf{d}}\\): \\[ \\mathbf{d}_i=\\hat{\\mathbf{d}}+\\tan(\\theta_{\\Delta })\\hat{\\mathbf{d}}_\\perp \\] 8. Normalize \\(\\mathbf{d}_i\\): \\[ \\hat{\\mathbf{d}}_i=\\cfrac{\\mathbf{d}_i}{\\left\\lVert\\mathbf{d}_i\\right\\rVert} \\]","code":""},{"path":"/articles/theory.html","id":"determine-distance-of-point-projections-from-the-center-of-the-cluster-supporting-line","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail > 6. For each cluster \\(i\\):","what":"6.2. Determine distance of point projections from the center of the cluster-supporting line","title":"Theory","text":"distance point projections center cluster-supporting line given \\(p_\\text{proj}()\\) function according : \\[ \\mathbf{w}_i = p_\\text{proj}(\\ell_i, p_i) \\] \\(\\mathbf{w}_i\\) \\(p_i \\times 1\\) vector containing distance point projection center line, \\(\\ell_i\\) \\(p_i\\) line length number points cluster \\(\\), respectively. \\(p_\\text{proj}()\\) function optional parameter, allowing users customize behavior. clugenr provides two concrete implementations box, specified passing \"norm\" \"unif\" clugen()’s proj_dist_fn parameter. work follows: \"norm\" (default) - element \\(\\mathbf{w}_i\\) derived \\(\\mathcal{N}(0, (\\frac{\\ell_i}{6})^2)\\), .e., normal distribution, centered cluster-supporting line center (\\(\\mu=0\\)) standard deviation \\(\\sigma=\\frac{\\ell_i}{6}\\), length line segment encompasses \\(\\approx\\) 99.73% generated projections. Consequently, projections may placed outside line’s end points. \"unif\" - element \\(\\mathbf{w}_i\\) derived \\(\\mathcal{U}(-\\frac{\\ell_i}{2}, \\frac{\\ell_i}{2})\\), .e., continuous uniform distribution interval \\(\\left[-\\frac{\\ell_i}{2}, \\frac{\\ell_i}{2}\\right[\\). Thus, projections uniformly dispersed along cluster-supporting line. impact various implementations \\(p_\\text{proj}()\\) demonstrated Figure 6. Figures 6a 6b show clusters generated \"norm\" \"unif\" options, respectively, Figures 6c 6d highlight custom user functions implementing Laplace Rayleigh distributions, respectively. parameters set Figure 1, except \\(p_\\text{proj}()\\) case Figures 6b-6d, \\(p\\), set 5000. Figure 6 - Clusters generated various implementations \\(p_\\text{proj}()\\): ) default, line center distances drawn normal distribution, specified using -built \"norm\" option; b) center distances derived uniform distribution, via -built \"unif\" option; c) line center distances obtained custom user function implementing Laplace distribution; , d) custom user function returns center distances drawn Rayleigh distribution. parameters set Figure 1, except \\(p_\\text{proj}()\\) case Figures 6b-6d, \\(p\\), set 5000.","code":""},{"path":"/articles/theory.html","id":"determine-coordinates-of-point-projections-on-the-cluster-supporting-line","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail > 6. For each cluster \\(i\\):","what":"6.3. Determine coordinates of point projections on the cluster-supporting line","title":"Theory","text":"deterministic step performed points_on_line() function using vector formulation line equation, follows: \\[ \\mathbf{P}_i^\\text{proj}=\\mathbf{1}\\,\\mathbf{c}_i^T + \\mathbf{w}_i\\hat{\\mathbf{d}}_i^T \\] \\(\\mathbf{P}_i^\\text{proj}\\) \\(p_i \\times n\\) matrix point projection coordinates line, \\(\\mathbf{1}\\) \\(p_i \\times 1\\) vector entries equal 1, \\(\\mathbf{c}_i\\) coordinates line center (\\(n \\times 1\\) vector), \\(\\mathbf{w}_i\\) distance point projection center line (\\(p_i \\times 1\\) vector obtained previous step), \\(\\hat{\\mathbf{d}}_i\\) direction cluster-supporting line cluster \\(\\).","code":""},{"path":"/articles/theory.html","id":"determine-points-from-their-projections-on-the-cluster-supporting-line","dir":"Articles","previous_headings":"Detailed description > The algorithm in detail > 6. For each cluster \\(i\\):","what":"6.4. Determine points from their projections on the cluster-supporting line","title":"Theory","text":"final cluster points, obtained projections cluster-supporting line, given \\(p_\\text{final}()\\) function according : \\[ \\mathbf{P}_i^\\text{final} = p_\\text{final}(\\mathbf{P}_i^\\text{proj}, f_\\sigma, \\ell_i, \\hat{\\mathbf{d}}_i, \\mathbf{c}_i) \\] \\(\\mathbf{P}_i^\\text{final}\\) \\(p_i \\times n\\) matrix containing coordinates generated points, \\(\\mathbf{P}_i^\\text{proj}\\) \\(p_i \\times n\\) matrix projection coordinates (determined previous step), \\(f_\\sigma\\) lateral dispersion parameter. turn, \\(\\ell_i\\), \\(\\hat{\\mathbf{d}}_i\\) \\(\\mathbf{c}_i\\) length, direction center cluster-supporting line. \\(p_\\text{final}()\\) function optional parameter, allowing users customize behavior. clugenr provides two concrete implementations box, specified passing \"n-1\" \"n\" clugen()’s point_dist_fn parameter. work follows: \"n-1\" (default) - Points placed hyperplane orthogonal cluster-supporting line intersecting point’s projection. done obtaining \\(p_i\\) random unit vectors orthogonal \\(\\hat{\\mathbf{d}}_i\\), determining magnitude using normal distribution (\\(\\mu=0\\), \\(\\sigma=f_\\sigma\\)). vectors added respective projections cluster-supporting line, yielding final cluster points. behavior implemented clupoints_n_1() function. \"n\" - Points placed around respective projections. done obtaining \\(p_i\\) random unit vectors, determining magnitude using normal distribution (\\(\\mu=0\\), \\(\\sigma=f_\\sigma\\)). vectors added respective projections cluster-supporting line, yielding final cluster points. behavior implemented clupoints_n() function. Figure 7 highlights differences two approaches 2D, hyperplane simply line. Figure 7 - Example final cluster points obtained 2D using built-implementations \\(p_\\text{final}()\\). general, points can placed using \"n-1\" \"n\" strategy using distribution. Figure 8 displays several examples various implementations \\(p_\\text{final}()\\), either based \"n-1\" \"n\" strategy, using different distributions. Figures 8a 8b show built-\"n-1\" \"n\" strategies making use normal distribution. Figures 8c-8f highlight possibilities custom user functions. Figure 8c shows effect using exponential distribution \"n-1\" strategy, Figure 8d displays result using bimodal distribution strategy. complex distribution, producing “hollow” clusters \"n\" strategy, employed Figures 8e 8f, latter also \\(p_\\text{proj}()\\) function set \"unif\". remaining parameters (subfigures) set Figure 1, except \\(p\\), set 5000. Figure 8 - Examples various implementations \\(p_\\text{final}()\\). Figures b shown effect built-implementations, Figures c-f display results obtained using custom user functions.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nuno Fachada. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"N. Fachada, D. de Andrade (2023). Generating Multidimensional Clusters Support Lines. arXiv URL https://doi.org/10.48550/arXiv.2301.10327.","code":"@Article{,   title = {Generating Multidimensional Clusters With Support Lines},   author = {Nuno Fachada and Diogo {de Andrade}},   journal = {arXiv},   year = {2023},   doi = {10.48550/arXiv.2301.10327}, }"},{"path":"/index.html","id":"clugenr-","dir":"","previous_headings":"","what":"Multidimensional Cluster Generation Using Support Lines","title":"Multidimensional Cluster Generation Using Support Lines","text":"clugenr R package generating multidimensional clusters. cluster supported line segment, position, orientation length guide respective points placed. clugen() function provided purpose, well number auxiliary functions, used internally modularly clugen(). Users can swap auxiliary functions customized versions, fine-tuning cluster generation strategies, even use basis generation algorithms.","code":""},{"path":"/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Multidimensional Cluster Generation Using Support Lines","text":"stable version package available CRAN can installed following instruction: Alternatively, install development version GitHub following command (requires devtools package):","code":"install.packages(\"clugenr\") devtools::install_github(\"clugen/clugenr\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Multidimensional Cluster Generation Using Support Lines","text":"","code":"library(clugenr) x <- clugen(2, 5, 1000, c(1, -0.5), 0.5, c(4, 6), 6, 0.2, 0.5) plot(x$points, col = x$clusters, xlab = \"x\", ylab = \"y\", asp = 1) library(clugenr) library(rgl) # For 3D plots x <- clugen(3, 5, 2000, c(1, 0.5, -0.7), 0.5, c(15, 10, 20), 15, 3, 10) plot3d(x$points, col = x$clusters, xlab = \"x\", ylab = \"y\", zlab = \"z\", aspect = T)"},{"path":"/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Multidimensional Cluster Generation Using Support Lines","text":"Theory: clugen algorithm detail Detailed usage examples: 2D, 3D, dimensions Function reference Developing package","code":""},{"path":"/reference/angle_btw.html","id":null,"dir":"Reference","previous_headings":"","what":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","title":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","text":"Typically, angle two vectors v1 v2 can obtained :   However, approach numerically unstable. version provided numerically stable based Angle Vectors Julia package Jeffrey Sarnoff (MIT license), implementing algorithm provided Prof. W. Kahan notes (see page 15).","code":"acos((v1 %*% v2) / (norm(v1, \"2\") * norm(v2, \"2\")))"},{"path":"/reference/angle_btw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","text":"","code":"angle_btw(v1, v2)"},{"path":"/reference/angle_btw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","text":"v1 First vector. v2 Second vector.","code":""},{"path":"/reference/angle_btw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","text":"Angle v1 v2 radians.","code":""},{"path":"/reference/angle_btw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Angle between two \\(n\\)-dimensional vectors. — angle_btw","text":"","code":"angle_btw(c(1.0, 1.0, 1.0, 1.0), c(1.0, 0.0, 0.0, 0.0)) * 180 / pi #> [1] 60"},{"path":"/reference/angle_deltas.html","id":null,"dir":"Reference","previous_headings":"","what":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"Determine angles average cluster direction cluster-supporting lines. angles obtained wrapped normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) angle_disp ) support interval \\(\\left[-\\pi/2,\\pi/2\\right]\\). Note different standard wrapped normal distribution, support given interval \\(\\left[-\\pi,\\pi\\right]\\).","code":""},{"path":"/reference/angle_deltas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"","code":"angle_deltas(num_clusters, angle_disp)"},{"path":"/reference/angle_deltas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"num_clusters Number clusters. angle_disp Angle dispersion, radians.","code":""},{"path":"/reference/angle_deltas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"Angles average cluster direction cluster-supporting lines, given radians interval \\(\\left[-\\pi/2,\\pi/2\\right]\\)","code":""},{"path":"/reference/angle_deltas.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/angle_deltas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get angles between average cluster direction and cluster-supporting lines — angle_deltas","text":"","code":"set.seed(123) arad <- angle_deltas(4, pi / 8) # Angle dispersion of 22.5 degrees arad                            # What angles deltas did we get? #> [1] -0.22009827 -0.09039049  0.61210332  0.02768858 arad * 180 / pi                 #  Show angle deltas in degrees #> [1] -12.610702  -5.178994  35.070937   1.586439"},{"path":"/reference/clucenters.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine cluster centers using the uniform distribution — clucenters","title":"Determine cluster centers using the uniform distribution — clucenters","text":"Determine cluster centers using uniform distribution, taking account number clusters (num_clusters) average cluster separation (clu_sep). specifically, let \\(c=\\)num_clusters, \\(\\mathbf{s}=\\)clu_sep, \\(\\mathbf{o}=\\)clu_offset, \\(n=\\)length(clu_sep) (.e., number dimensions). Cluster centers obtained according following equation: \\[\\mathbf{C}=c\\mathbf{U}\\cdot\\operatorname{diag}(\\mathbf{s}) + \\mathbf{1}\\,\\mathbf{o}^T\\] \\(\\mathbf{C}\\) \\(c \\times n\\) matrix cluster centers, \\(\\mathbf{U}\\) \\(c \\times n\\) matrix random values drawn uniform distribution -0.5 0.5, \\(\\mathbf{1}\\) \\(c \\times 1\\) vector entries equal 1.","code":""},{"path":"/reference/clucenters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine cluster centers using the uniform distribution — clucenters","text":"","code":"clucenters(num_clusters, clu_sep, clu_offset)"},{"path":"/reference/clucenters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine cluster centers using the uniform distribution — clucenters","text":"num_clusters Number clusters. clu_sep Average cluster separation (\\(n \\times 1\\) vector). clu_offset Cluster offsets (\\(n \\times 1\\) vector).","code":""},{"path":"/reference/clucenters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine cluster centers using the uniform distribution — clucenters","text":"\\(c \\times n\\) matrix containing cluster centers.","code":""},{"path":"/reference/clucenters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine cluster centers using the uniform distribution — clucenters","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clucenters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine cluster centers using the uniform distribution — clucenters","text":"","code":"set.seed(321) clucenters(3, c(30, 10), c(-50,50)) #>            [,1]     [,2] #> [1,]  -8.969561 42.65221 #> [2,] -10.644303 46.71536 #> [3,] -73.560159 45.23540"},{"path":"/reference/clugen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate multidimensional clusters — clugen","title":"Generate multidimensional clusters — clugen","text":"main function clugenr, possibly function users need.","code":""},{"path":"/reference/clugen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate multidimensional clusters — clugen","text":"","code":"clugen(   num_dims,   num_clusters,   num_points,   direction,   angle_disp,   cluster_sep,   llength,   llength_disp,   lateral_disp,   allow_empty = FALSE,   cluster_offset = NA,   proj_dist_fn = \"norm\",   point_dist_fn = \"n-1\",   clusizes_fn = clusizes,   clucenters_fn = clucenters,   llengths_fn = llengths,   angle_deltas_fn = angle_deltas,   seed = NA )"},{"path":"/reference/clugen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate multidimensional clusters — clugen","text":"num_dims Number dimensions. num_clusters Number clusters generate. num_points Total number points generate. direction Average direction cluster-supporting lines (vector length num_dims). angle_disp Angle dispersion cluster-supporting lines (radians). cluster_sep Average cluster separation dimension (vector length num_dims). llength Average length cluster-supporting lines. llength_disp Length dispersion cluster-supporting lines. lateral_disp Cluster lateral dispersion, .e., dispersion points projection cluster-supporting line. allow_empty Allow empty clusters? FALSE default. cluster_offset Offset add cluster centers (vector length num_dims). default offset. proj_dist_fn Distribution point projections along cluster-supporting lines, three possible values: \"norm\" (default): Distribute point projections along lines using normal distribution (\\(\\mu=\\) line_center, \\(\\sigma=\\) llength/6 ). \"unif\": Distribute points uniformly along line. User-defined function, accepts two parameters, line length (double) number points (integer), returns vector containing distance point projection center line. example, \"norm\" option roughly corresponds function(l, n) stats::rnorm(n, sd = l / 6). point_dist_fn Controls final points created projections cluster-supporting lines, three possible values: \"n-1\" (default): Final points placed hyperplane orthogonal cluster-supporting line, centered point's projection, using normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) lateral_disp ). done clupoints_n_1 function. \"n\": Final points placed around projection cluster-supporting line using normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) lateral_disp ). done clupoints_n function. User-defined function: user can specify custom point placement strategy passing function signature clupoints_n_1 clupoints_n. clusizes_fn Distribution cluster sizes. default, cluster sizes determined clusizes function, uses normal distribution (\\(\\mu=\\) num_points/num_clusters, \\(\\sigma=\\mu/3\\)), assures final cluster sizes add num_points. parameter allows user specify custom function purpose, must follow clusizes signature. Note custom functions required strictly obey num_points parameter. clucenters_fn Distribution cluster centers. default, cluster centers determined clucenters function, uses uniform distribution, takes account num_clusters cluster_sep parameters generating well-distributed cluster centers. parameter allows user specify custom function purpose, must follow clucenters signature. llengths_fn Distribution line lengths. default, lengths cluster-supporting lines determined llengths function, uses folded normal distribution (\\(\\mu=\\) llength, \\(\\sigma=\\) llength_disp ). parameter allows user specify custom function purpose, must follow llengths signature. angle_deltas_fn Distribution line angle differences respect direction. default, angles direction direction cluster-supporting lines determined angle_deltas function, uses wrapped normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) angle_disp ) support interval \\(\\left[-\\pi/2,\\pi/2\\right]\\). parameter allows user specify custom function purpose, must follow angle_deltas signature. seed integer used initialize PRNG, allowing reproducible results. specified, seed simply passed set.seed.","code":""},{"path":"/reference/clugen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate multidimensional clusters — clugen","text":"named list following elements: points: num_points x num_dims matrix generated points clusters. clusters: num_points factor vector indicating cluster point points belongs . projections: num_points x num_dims matrix point projections cluster-supporting lines. sizes: num_clusters x 1 vector number points cluster. centers: num_clusters x num_dims matrix coordinates cluster centers. directions: num_clusters x num_dims matrix direction cluster-supporting line. angles: num_clusters x 1 vector angles cluster-supporting lines main direction. lengths: num_clusters x 1 vector lengths cluster-supporting lines.","code":""},{"path":"/reference/clugen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate multidimensional clusters — clugen","text":"custom function given clusizes_fn parameter, possible num_points may different value specified num_points parameter. terms \"average\" \"dispersion\" refer measures central tendency statistical dispersion, respectively. exact meaning depends optional arguments.","code":""},{"path":"/reference/clugen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate multidimensional clusters — clugen","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clugen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate multidimensional clusters — clugen","text":"","code":"# 2D example x <- clugen(2, 5, 1000, c(1, 3), 0.5, c(10, 10), 8, 1.5, 2) graphics::plot(x$points, col = x$clusters, xlab = \"x\", ylab = \"y\", asp = 1)  # 3D example x <- clugen(3, 5, 1000, c(2, 3, 4), 0.5, c(15, 13, 14), 7, 1, 2)"},{"path":"/reference/clugenr.html","id":null,"dir":"Reference","previous_headings":"","what":"clugenr: Multidimensional cluster generation in R — clugenr","title":"clugenr: Multidimensional cluster generation in R — clugenr","text":"clugenr R package generating multidimensional clusters. cluster supported line segment, position, orientation length guide respective points placed.","code":""},{"path":"/reference/clugenr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"clugenr: Multidimensional cluster generation in R — clugenr","text":"MIT License","code":""},{"path":"/reference/clugenr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"clugenr: Multidimensional cluster generation in R — clugenr","text":"Nuno Fachada","code":""},{"path":"/reference/clupoints_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Create points from their projections on a cluster-supporting line — clupoints_n","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"point placed around projection using normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) lat_disp ).","code":""},{"path":"/reference/clupoints_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"","code":"clupoints_n(projs, lat_disp, line_len, clu_dir, clu_ctr)"},{"path":"/reference/clupoints_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"projs Point projections cluster-supporting line (\\(p \\times n\\) matrix). lat_disp Standard deviation normal distribution, .e., cluster lateral dispersion. line_len Length cluster-supporting line (ignored). clu_dir Direction cluster-supporting line. clu_ctr Center position cluster-supporting line (ignored).","code":""},{"path":"/reference/clupoints_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"Generated points (\\(p \\times n\\) matrix).","code":""},{"path":"/reference/clupoints_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"function's main intended use main clugen function, generating final points point_dist_fn parameter set \"n\".","code":""},{"path":"/reference/clupoints_n.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clupoints_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create points from their projections on a cluster-supporting line — clupoints_n","text":"","code":"set.seed(123) ctr <- c(0, 0) dir <- c(1, 0) pdist <- c(-0.5, -0.2, 0.1, 0.3) proj <- points_on_line(ctr, dir, pdist) clupoints_n(proj, 0.01, NA, dir, NA) #>            [,1]         [,2] #> [1,] -0.5056048  0.001292877 #> [2,] -0.2023018  0.017150650 #> [3,]  0.1155871  0.004609162 #> [4,]  0.3007051 -0.012650612"},{"path":"/reference/clupoints_n_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Create points from their projections on a cluster-supporting line — clupoints_n_1","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"point placed hyperplane orthogonal line centered point's projection, using normal distribution (\\(\\mu=0\\), \\(\\sigma=\\) lat_disp ).","code":""},{"path":"/reference/clupoints_n_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"","code":"clupoints_n_1(projs, lat_disp, line_len, clu_dir, clu_ctr)"},{"path":"/reference/clupoints_n_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"projs Point projections cluster-supporting line (\\(p \\times n\\) matrix). lat_disp Standard deviation normal distribution, .e., cluster lateral dispersion. line_len Length cluster-supporting line (ignored). clu_dir Direction cluster-supporting line. clu_ctr Center position cluster-supporting line (ignored).","code":""},{"path":"/reference/clupoints_n_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"Generated points (\\(p \\times n\\) matrix).","code":""},{"path":"/reference/clupoints_n_1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"function's main intended use main clugen function, generating final points point_dist_fn parameter set \"n-1\".","code":""},{"path":"/reference/clupoints_n_1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clupoints_n_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1","text":"","code":"set.seed(123) ctr <- c(0, 0) dir <- c(1, 0) pdist <- c(-0.5, -0.2, 0.1, 0.3) proj <- points_on_line(ctr, dir, pdist) clupoints_n_1(proj, 0.1, NA, dir, NA) #>      [,1]         [,2] #> [1,] -0.5 -0.056047565 #> [2,] -0.2 -0.023017749 #> [3,]  0.1  0.155870831 #> [4,]  0.3  0.007050839"},{"path":"/reference/clupoints_n_1_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"Generate points \\(n\\)-dimensional projections cluster-supporting line, placing point hyperplane orthogonal line centered point's projection. function specified dist_fn used perform actual placement.","code":""},{"path":"/reference/clupoints_n_1_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"","code":"clupoints_n_1_template(projs, lat_disp, clu_dir, dist_fn)"},{"path":"/reference/clupoints_n_1_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"projs Point projections cluster-supporting line (\\(p \\times n\\) matrix). lat_disp Dispersion points projection. clu_dir Direction cluster-supporting line (unit vector). dist_fn Function place points second line, orthogonal first.","code":""},{"path":"/reference/clupoints_n_1_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"Generated points (\\(p \\times n\\) matrix).","code":""},{"path":"/reference/clupoints_n_1_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"function used internally clupoints_n_1 may useful constructing user-defined final point placement strategies point_dist_fn parameter main clugen function.","code":""},{"path":"/reference/clupoints_n_1_template.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clupoints_n_1_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create points from their projections on a cluster-supporting line — clupoints_n_1_template","text":"","code":"set.seed(123) ctr <- c(0, 0) dir <- c(1, 0) pdist <- c(-0.5, -0.2, 0.1, 0.3) proj <- points_on_line(ctr, dir, pdist) clupoints_n_1_template(proj, 0, dir, function(p, l) stats::runif(p)) #>      [,1]       [,2] #> [1,] -0.5 -0.2875775 #> [2,] -0.2  0.7883051 #> [3,]  0.1 -0.4089769 #> [4,]  0.3 -0.8830174"},{"path":"/reference/clusizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"Cluster sizes determined using normal distribution (\\(\\mu=\\) num_points \\(/\\) num_clusters, \\(\\sigma=\\mu/3\\)), assuring final cluster sizes add num_points via fix_num_points function.","code":""},{"path":"/reference/clusizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"","code":"clusizes(num_clusters, num_points, allow_empty)"},{"path":"/reference/clusizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"num_clusters Number clusters. num_points Total number points. allow_empty Allow empty clusters?","code":""},{"path":"/reference/clusizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"Number points cluster (vector length num_clusters).","code":""},{"path":"/reference/clusizes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/clusizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine cluster sizes, i.e., the number of points in each cluster — clusizes","text":"","code":"set.seed(123) sizes <- clusizes(4, 1000, TRUE) sizes #> [1] 190 216 355 239 sum(sizes) #> [1] 1000"},{"path":"/reference/fix_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Certify that, given enough points, no clusters are left empty — fix_empty","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"Certifies , given enough points, clusters left empty. done removing point largest cluster adding empty cluster empty clusters. total number points smaller number clusters (allow_empty parameter set TRUE), function nothing.","code":""},{"path":"/reference/fix_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"","code":"fix_empty(clu_num_points, allow_empty = FALSE)"},{"path":"/reference/fix_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"clu_num_points Number points cluster (vector size \\(c\\)), \\(c\\) number clusters. allow_empty Allow empty clusters?","code":""},{"path":"/reference/fix_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"Number points cluster, fixed function (vector size \\(c\\)).","code":""},{"path":"/reference/fix_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"function used internally clusizes might useful custom cluster sizing implementations given clusizes_fn parameter main clugen function.","code":""},{"path":"/reference/fix_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Certify that, given enough points, no clusters are left empty — fix_empty","text":"","code":"clusters <- c(3, 4, 5, 0, 0)    # A vector with some empty elements clusters <- fix_empty(clusters) # Apply this function clusters                        # Check that there's no more empty elements #> [1] 3 3 4 1 1"},{"path":"/reference/fix_num_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Certify that array values add up to a specific total — fix_num_points","title":"Certify that array values add up to a specific total — fix_num_points","text":"Certifies values clu_num_points array, .e. number points cluster, add num_points. case, clu_num_points array modified -place, incrementing value corresponding smallest cluster sum(clu_num_points) < num_points, decrementing value corresponding largest cluster sum(clu_num_points) > num_points.","code":""},{"path":"/reference/fix_num_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Certify that array values add up to a specific total — fix_num_points","text":"","code":"fix_num_points(clu_num_points, num_points)"},{"path":"/reference/fix_num_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Certify that array values add up to a specific total — fix_num_points","text":"clu_num_points Number points cluster (vector size \\(c\\)), \\(c\\) number clusters. num_points expected total number points.","code":""},{"path":"/reference/fix_num_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Certify that array values add up to a specific total — fix_num_points","text":"Number points cluster, fixed function.","code":""},{"path":"/reference/fix_num_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Certify that array values add up to a specific total — fix_num_points","text":"function used internally clusizes might useful custom cluster sizing implementations given clusizes_fn parameter main clugen function.","code":""},{"path":"/reference/fix_num_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Certify that array values add up to a specific total — fix_num_points","text":"","code":"clusters <- c(1, 6, 3)                   # 10 total points clusters <- fix_num_points(clusters, 12) # But we want 12 total points clusters                                 # Check that we now have 12 points #> [1] 3 6 3"},{"path":"/reference/llengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine length of cluster-supporting lines — llengths","title":"Determine length of cluster-supporting lines — llengths","text":"Line lengths determined using folded normal distribution (\\(\\mu=\\) llength, \\(\\sigma=\\) llength_disp ).","code":""},{"path":"/reference/llengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine length of cluster-supporting lines — llengths","text":"","code":"llengths(num_clusters, llength, llength_disp)"},{"path":"/reference/llengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine length of cluster-supporting lines — llengths","text":"num_clusters Number clusters. llength Average line length. llength_disp Line length dispersion.","code":""},{"path":"/reference/llengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine length of cluster-supporting lines — llengths","text":"Lengths cluster-supporting lines (vector size num_clusters).","code":""},{"path":"/reference/llengths.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine length of cluster-supporting lines — llengths","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/llengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine length of cluster-supporting lines — llengths","text":"","code":"set.seed(123) llengths(4, 20, 3.5) #> [1] 18.03834 19.19438 25.45548 20.24678"},{"path":"/reference/points_on_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine coordinates of points on a line — points_on_line","title":"Determine coordinates of points on a line — points_on_line","text":"Determine coordinates points line center direction, based distances center given dist_center. works using vector formulation line equation assuming direction \\(n\\)-dimensional unit vector. words, considering \\(\\mathbf{d}=\\) .matrix(direction) (\\(n \\times 1\\) vector), \\(\\mathbf{c}=\\) .matrix(center) (\\(n \\times 1\\) vector), \\(\\mathbf{w}=\\) .matrix(dist_center) (\\(p \\times 1\\) vector), coordinates points line given : \\[\\mathbf{P}=\\mathbf{1}\\,\\mathbf{c}^T + \\mathbf{w}\\mathbf{d}^T\\] \\(\\mathbf{P}\\) \\(p \\times n\\) matrix point coordinates line, \\(\\mathbf{1}\\) \\(p \\times 1\\) vector entries equal 1.","code":""},{"path":"/reference/points_on_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine coordinates of points on a line — points_on_line","text":"","code":"points_on_line(center, direction, dist_center)"},{"path":"/reference/points_on_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine coordinates of points on a line — points_on_line","text":"center Center line (\\(n\\)-component vector). direction Line direction (\\(n\\)-component unit vector). dist_center Distance point center line (\\(n\\)-component vector, \\(n\\) number points).","code":""},{"path":"/reference/points_on_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine coordinates of points on a line — points_on_line","text":"Coordinates points specified line (\\(p \\times n\\) matrix).","code":""},{"path":"/reference/points_on_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine coordinates of points on a line — points_on_line","text":"","code":"points_on_line(c(5, 5), c(1, 0), seq(-4, 4, length.out=5)) # 2D, 5 points #>      [,1] [,2] #> [1,]    1    5 #> [2,]    3    5 #> [3,]    5    5 #> [4,]    7    5 #> [5,]    9    5  points_on_line(c(-2, 0, 0, 2), c(0, 0, -1, 0), c(10, -10)) # 4D, 2 points #>      [,1] [,2] [,3] [,4] #> [1,]   -2    0  -10    2 #> [2,]   -2    0   10    2"},{"path":"/reference/rand_ortho_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a random unit vector orthogonal to u. — rand_ortho_vector","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"Get random unit vector orthogonal u.","code":""},{"path":"/reference/rand_ortho_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"","code":"rand_ortho_vector(u)"},{"path":"/reference/rand_ortho_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"u unit vector.","code":""},{"path":"/reference/rand_ortho_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"random unit vector orthogonal u.","code":""},{"path":"/reference/rand_ortho_vector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/rand_ortho_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a random unit vector orthogonal to u. — rand_ortho_vector","text":"","code":"r <- stats::runif(3)      # Get a random 3D vector r <- r / norm(r, \"2\")     # Normalize it o <- rand_ortho_vector(r) # Get a random unit vector orthogonal to r r %*% o            # Check that r and o are orthogonal (result should be ~0) #>               [,1] #> [1,] -6.938894e-18"},{"path":"/reference/rand_unit_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a random unit vector with num_dims components. — rand_unit_vector","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"Get random unit vector num_dims components.","code":""},{"path":"/reference/rand_unit_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"","code":"rand_unit_vector(num_dims)"},{"path":"/reference/rand_unit_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"num_dims Number components vector (.e. vector size).","code":""},{"path":"/reference/rand_unit_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"random unit vector num_dims components.","code":""},{"path":"/reference/rand_unit_vector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/rand_unit_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a random unit vector with num_dims components. — rand_unit_vector","text":"","code":"r <- rand_unit_vector(4) norm(r, \"2\") #> [1] 1"},{"path":"/reference/rand_vector_at_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"Get random unit vector angle radians vector u. Note u expected unit vector .","code":""},{"path":"/reference/rand_vector_at_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"","code":"rand_vector_at_angle(u, angle)"},{"path":"/reference/rand_vector_at_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"u Unit vector \\(n\\) components. angle Angle radians.","code":""},{"path":"/reference/rand_vector_at_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"Random unit vector \\(n\\) components angle radians vector u.","code":""},{"path":"/reference/rand_vector_at_angle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"function stochastic. reproducibility set PRNG seed set.seed.","code":""},{"path":"/reference/rand_vector_at_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a random unit vector at a given angle with another vector. — rand_vector_at_angle","text":"","code":"u <- c(1.0, 0, 0.5, -0.5)            # Define a 4D vector u <- u / norm(u, \"2\")                # Normalize the vector v <- rand_vector_at_angle(u, pi / 4) # Get a vector at 45 degrees arad <- acos((u %*% v) / norm(u,\"2\") * norm(v, \"2\")) # Get angle in radians arad * 180 / pi # Convert to degrees, should be close to 45 degrees #>      [,1] #> [1,]   45"},{"path":"/news/index.html","id":"clugenr-010","dir":"Changelog","previous_headings":"","what":"clugenr 0.1.0","title":"clugenr 0.1.0","text":"CRAN release: 2023-01-27 First release.","code":""}]
